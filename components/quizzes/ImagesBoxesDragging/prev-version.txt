import { useState } from "react";
//= Components
import VideoSection from "./../../VideoSection/VideoSection";
import AudioSection from "../../AudioSection/AudioSection";
// axios
import { apiClient } from '../../../Utils/axios';

import Cookies from "universal-cookie";

;
//== Component Logic
import useLogic from './logic';
//== Styles
import cls from './imagesBoxesDragging.module.scss';
import Image from "next/image";
import { Icon } from "@iconify/react/dist/iconify.js";

const cookie = new Cookies();

const ImagesBoxesDragging = ({
  question,
  setOpenQuizModal,
  attemptId,
  questionNum,
  setQuestionNum,
  questionsNum,
  direction,
  setOpenPreview,
  setLoading,
  setResults,
  setOpenSuccess,
}) => {
  const { draggableContainer, dragStart, dragEnd, dragOver, drop, touchStart, touchMoving, touchEnd, retry, rendered, studentAnswer } = useLogic();

  const [changing, setChanging] = useState(false);

  const submit = async () => {
    if (studentAnswer.length) {
      setLoading(true);
      let answersArray = []
      studentAnswer.forEach(ans => {
        let neededAnswer = question?.answers.find((answer) => ans === answer.answer_img)
        if (neededAnswer?.id) answersArray.push(neededAnswer?.id)
      })
      const data = {
        quiz_attempt_id: attemptId,
        question_id: question.id,
        given_answer: answersArray,
      };

      const response = await apiClient
        .post(`/crm/students/quiz/answer_question`, data, {
          headers: {
            Authorization: `Bearer ${cookie.get("ibook-auth")}`,
          },
        })
        .catch((err) => console.log(err));

      if (!response) return;

      setLoading(false);

      setResults((prev) => [...prev, response.data.data?.is_correct]);

      if (questionsNum === questionNum) {
        setOpenSuccess(true);
      } else {
        setQuestionNum((questionNum += 1));
        setChanging(true);

        setTimeout(() => {
          setChanging(false);
        }, 1000);
      }
    }
  };

  if (!rendered) return null;
  return (
    <>
      <div className={`stepper ${direction === "rtl" ? "arabic" : "english"}`}>
        <div className="step">
          <p>{questionNum}</p>
          {direction === "rtl" ? (
            <span>السؤال الحالي</span>
          ) : (
            <span>Current Question</span>
          )}
        </div>

        <div className="lastStep">
          <p>{questionsNum}</p>
          {direction === "rtl" ? (
            <span>عدد الاسئلة</span>
          ) : (
            <span>Questions Number</span>
          )}
        </div>
      </div>
      <div className={cls.imagesBoxesDragging}>
        <h6>{question?.title}</h6>
        <div className="quizHelpers">
          {question?.question_video_link && (
            <div className={cls.videoSection}>
              <VideoSection
                video={question?.question_video_link}
                openModal={setOpenPreview}
                data={false}
              />
            </div>
          )}
          {question?.question_audio && (
            <div className={cls.audioSection}>
              <AudioSection audio={question?.question_audio} data={false} />
            </div>
          )}
        </div>
        <div className={cls.droppables}>
          {question.answers.filter(answer => answer.is_correct == "1" && answer).map((_, idx) => (
            <div
              className={cls.item}
              onDragOver={(e) => dragOver(e)}
              onDrop={(e) => drop(e)}
              key={idx}
            ></div>
          ))}
        </div>
        <div className={cls.draggables} ref={draggableContainer}>
          {question.answers.map((answer, idx) => (
            // <div key={idx}>
            <Image
              width={100}
              height={100}
              key={idx}
              src={answer.answer_img}
              alt={answer.title}
              draggable={true}
              onDragStart={(e) => dragStart(e)}
              onDragEnd={(e) => dragEnd(e)}
              onTouchStart={(e) => touchStart(e)}
              onTouchMove={(e) => touchMoving(e)}
              onTouchEnd={(e) => touchEnd(e)}
            />
            // </div>
          ))}
        </div>
      </div>
      <div className={cls.btn}>
        <button onClick={submit}>
          <span style={{margin: "0px 4px"}}>
            {questionsNum === questionNum
              ? direction === "rtl"
                ? "تأكيد"
                : "Submit"
              : direction === "rtl"
                ? "التالي"
                : "Next"}
          </span>
          <Icon
            className={questionsNum === questionNum ? cls.check : cls.next}
            icon={
              questionsNum === questionNum
                ? "fa:check-circle"
                : "fa6-regular:circle-right"
            }
          />
        </button>
      </div>
    </>
  )
}

export default ImagesBoxesDragging;